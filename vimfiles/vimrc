if has('win32') || has('win64')
    set   termencoding=cp932
endif
if has('linux')
set   path+=/usr/include/**
endif

" File & Edit
set   backspace=indent,eol,start
set   encoding=utf-8
set   fileencoding=utf-8
set   fileencodings=ucs-bom,utf-8,cp932
set nobackup
set nowritebackup
set noswapfile
set noundofile
if has('unnamedplus')
    set clipboard&
    set clipboard^=unnamedplus
endif

" User Interface & Appearence
set notitle
set noruler
set nonumber
set   laststatus=2
set   statusline =%n\ %<%f%R%M,%{&ff}%y%h%w%q
set   statusline+=\ %{coc#status()}
set   statusline+=%=\ %(%l,%c%V%)\ %p%%
set   statusline+=\ %#warningmsg#
set   statusline+=%*
set   updatetime=500
set   wildmenu
set   mouse=

" Search
set   hlsearch
set   smartcase
set nowrapscan

" Misc.
if executable('rg')
    set   grepprg=rg\ --vimgrep
endif
set  wildignore =*.swp,*.~*
set  wildignore+=*.o,*.obj
set  wildignore+=*.so,*.dll
set  wildignore+=*.py[cod]
set  wildignore+=*.min.*
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
highlight ExtraWhitespace ctermbg=red guibg=red

" Plugins
call plug#begin()
Plug 'nanotech/jellybeans.vim', { 'tag': '*' }
Plug 'kana/vim-submode',        { 'tag': '*' }
Plug 'justinmk/vim-sneak',      { 'tag': '*' }
Plug 'tpope/vim-commentary',    { 'tag': '*' }
Plug 'tpope/vim-surround',      { 'tag': '*' }
Plug 'tpope/vim-fugitive',      { 'tag': '*' }
Plug 'junegunn/fzf',            { 'tag': '*' }
Plug 'junegunn/fzf.vim'
Plug 'sheerun/vim-polyglot',    { 'tag': '*' }
Plug 'neoclide/coc.nvim',       { 'tag': '*', 'branch': 'release' }
call plug#end()

filetype indent plugin on
syntax on

" Color scheme (note: load the plugin before this)
set t_Co=256
colorscheme jellybeans

" Keymaps
    " For l(ocation-list), q(uick-fix-list), (dia)g(nostic-items)
    nmap         ]l     :lnext<CR>
    nmap         [l     :lprevious<CR>
    nmap         ]q     :cnext<CR>
    nmap         [q     :cprevious<CR>
    nmap <silent>[g     <Plug>(coc-diagnostic-prev)
    nmap <silent>]g     <Plug>(coc-diagnostic-next)

    " Override go-to-definition and other language dependent actions
    nmap <silent>gd     <Plug>(coc-definition)
    nmap <leader>r      <Plug>(coc-rename)
    nmap <leader>f      <Plug>(coc-format)
    vmap <leader>f      <Plug>(coc-format-selected)

    " Ctrl+P to show file searcher
    nmap         <C-p>  :Files<CR>

    " Move forward/backward till next non-wsp at same the colum
    " https://vi.stackexchange.com/a/693
    nmap <silent>gJ     :call search('\%' . virtcol('.') . 'v\S', 'W')<CR>
    nmap <silent>gK     :call search('\%' . virtcol('.') . 'v\S', 'bW')<CR>

    " submode to control split window size (vim-submode)
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')

    " Others
    imap <silent><expr> <c-j>  coc#refresh()

" Indentation
set shiftround
function! s:SetIndent(size, expand)
    if a:expand == 1
        set   expandtab
    else
        set noexpandtab
    endif
    let &tabstop = a:size
    let &softtabstop = a:size
    let &shiftwidth = a:size
endfunction
call s:SetIndent(4, 1)
augroup indent
    autocmd!
    autocmd FileType gitconfig       call s:SetIndent(8, 0)
    autocmd FileType make            call s:SetIndent(8, 0)
    autocmd FileType go              call s:SetIndent(4, 0)
    autocmd FileType css             call s:SetIndent(2, 1)
    autocmd FileType html            call s:SetIndent(2, 1)
    autocmd FileType javascript      call s:SetIndent(2, 1)
    autocmd FileType javascriptreact call s:SetIndent(2, 1)
    autocmd FileType typescript      call s:SetIndent(2, 1)
    autocmd FileType typescriptreact call s:SetIndent(2, 1)
augroup END

augroup GolangSettings
    autocmd!
    autocmd FileType go nmap <leader>b  <Plug>(go-build)
    autocmd FileType go nmap <leader>r  <Plug>(go-run)
    let g:go_auto_sameids = 1
augroup END

augroup PythonSettings
    autocmd!
    autocmd FileType python set foldmethod=indent
    autocmd FileType python set foldlevel=999
    let g:jedi#popup_on_dot = 0
    let g:jedi#popup_select_first = 0
augroup END

augroup RustSettings
    autocmd!
    autocmd FileType rust nmap <leader>b :make build<cr>
    autocmd FileType rust nmap <leader>t :make test<cr>
    let g:rust_cargo_check_tests = 1
augroup END

augroup JsxSettings
    autocmd!
    autocmd FileType css             nmap <leader>f :%!prettier %<cr>
    autocmd FileType html            nmap <leader>f :%!prettier %<cr>
    autocmd FileType javascript      nmap <leader>f :%!prettier %<cr>
    autocmd FileType javascriptreact nmap <leader>f :%!prettier %<cr>
    autocmd FileType typescript      nmap <leader>f :%!prettier %<cr>
    autocmd FileType typescriptreact nmap <leader>f :%!prettier %<cr>
augroup END
