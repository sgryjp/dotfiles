" vim:set foldmethod=marker:

" Utility functions {{{

function! s:set_indent(size, expand)
    if a:expand == 1
        set   expandtab
    else
        set noexpandtab
    endif
    let &tabstop = a:size
    let &softtabstop = a:size
    let &shiftwidth = a:size
endfunction

" }}}

if has('win32') || has('win64')
    set   termencoding=cp932
    " :PlugUpdate fails if `pwsh.exe` is set for shell...
    " https://www.reddit.com/r/neovim/comments/gbb2g3/wierd_vimplug_error_messages/g3n3vtl/
    "if executable('pwsh')
    "    set shell=pwsh.exe
    "endif
endif
if has('linux')
set   path+=/usr/include/**
endif

" File & Edit
set   backspace=indent,eol,start
set   encoding=utf-8
set   fileencoding=utf-8
set   fileencodings=ucs-bom,utf-8,cp932
set nobackup
set nowritebackup
set noswapfile
set noundofile
if has('unnamedplus')
    set clipboard&
    set clipboard^=unnamedplus
endif

" User Interface & Appearence
set notitle
set noruler
set   number
set   relativenumber
if has('nvim-0.7')
    set laststatus=3
else
    set laststatus=2
endif
set   statusline =%n\ %<%f%R%M,%{&ff}%y%h%w%q
set   statusline+=%=\ %(%l,%c%V%)\ %p%%
set   statusline+=\ %#warningmsg#
set   statusline+=%*
set   scrolloff=2
set   updatetime=500
set   wildmenu
set   mouse=
set   completeopt=menuone,noinsert,noselect

" Search
set   hlsearch
set   ignorecase
set   smartcase
set nowrapscan

" Indentation
set shiftround
call s:set_indent(4, 1)
augroup indent
    autocmd!
    autocmd FileType gitconfig       call s:set_indent(8, 0)
    autocmd FileType make            call s:set_indent(8, 0)
    autocmd FileType go              call s:set_indent(4, 0)
    autocmd FileType css             call s:set_indent(2, 1)
    autocmd FileType html            call s:set_indent(2, 1)
    autocmd FileType javascript      call s:set_indent(2, 1)
    autocmd FileType javascriptreact call s:set_indent(2, 1)
    autocmd FileType typescript      call s:set_indent(2, 1)
    autocmd FileType typescriptreact call s:set_indent(2, 1)
augroup END

" Misc.
if executable('rg')
    set   grepprg=rg\ --vimgrep
endif
set  wildignore =*.swp,*.~*
set  wildignore+=*.o,*.obj
set  wildignore+=*.so,*.dll
set  wildignore+=*.py[cod]
set  wildignore+=*.min.*
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
highlight ExtraWhitespace ctermbg=red guibg=red
filetype indent plugin on

" Plugins
call plug#begin()
"Plug 'nanotech/jellybeans.vim', { 'tag': '*' }
Plug 'arcticicestudio/nord-vim',{ 'tag': '*' }
Plug 'editorconfig/editorconfig-vim', { 'tag': '*' }
Plug 'airblade/vim-gitgutter'
Plug 'kana/vim-submode',        { 'tag': '*' }
Plug 'justinmk/vim-sneak',      { 'tag': '*' }
Plug 'tpope/vim-commentary',    { 'tag': '*' }
Plug 'machakann/vim-sandwich',  { 'tag': '*' }
Plug 'tpope/vim-fugitive',      { 'tag': '*' }
Plug 'sheerun/vim-polyglot',    { 'tag': '*' }
Plug 'qpkorr/vim-renamer'
Plug 'editorconfig/editorconfig-vim', { 'tag': '*' }
if has('nvim')
    Plug 'nvim-lua/plenary.nvim' " for telescope.nvim
    Plug 'kyazdani42/nvim-web-devicons' " for telescope.nvim

    Plug 'neovim/nvim-lspconfig'
    Plug 'williamboman/nvim-lsp-installer'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-lualine/lualine.nvim'
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'onsails/lspkind-nvim'
    Plug 'jose-elias-alvarez/null-ls.nvim'
else
    Plug 'junegunn/fzf',        { 'tag': '*', 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
endif
call plug#end()

syntax on

" Color scheme (note: load the plugin before this) {{{
set t_Co=256
if has('termguicolors')
    set termguicolors
endif

" Use jellybeans color scheme with a litle darker background
" ...and adjust GitGutter sign color a little 
"let g:jellybeans_overrides = { 'background' : { 'guibg': '0c0c0c' }, }
"colorscheme jellybeans
"highlight GitGutterDelete       guifg=#ff000a guibg=#333333
"highlight GitGutterChangeDelete guifg=#ff000a guibg=#333333

let g:nord_italic = 1
let g:nord_underline = 1
colorscheme nord
" }}} Color scheme

" (GitGutter) Use '≅' instead of '~_' for modified & removed line
let g:gitgutter_sign_modified_removed = '≅'

" Neovim specific configurations
if has('nvim')
    set omnifunc=v:lua.vim.lsp.omnifunc

lua << EOF
    local ok, lualine = pcall(require, "lualine")
    if ok then
        lualine.setup {
            options = {
                globalstatus = true, -- nvim 0.7+
            }
        }
    end

    local ok, lsp_installer = pcall(require, "nvim-lsp-installer")
    if ok then
        lsp_installer.on_server_ready(function(server)
            server:setup {}
            vim.cmd("do User LspAttachBuffers")
        end)
    end

    local ok, cmp = pcall(require, "cmp")
    if ok then
        lspkind = require "lspkind"
        cmp.setup {
            mapping = cmp.mapping.preset.insert({
                ["<C-b>"]     = cmp.mapping.scroll_docs(-4),
                ["<C-f>"]     = cmp.mapping.scroll_docs(4),
                ["<C-j>"]     = cmp.mapping.complete(),
                ["<C-e>"]     = cmp.mapping.abort(),
                ["<CR>"]      = cmp.mapping.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = true }),
                ["<C-y>"]     = cmp.mapping.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = true }),
                ["<Tab>"]     = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
                ["<S-Tab>"]   = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
            }),
            sources = cmp.config.sources({
                { name = "nvim_lsp" },
            }, {
                { name = "buffer" },
                { name = "path" },
            }),
            formatting = {
                format = lspkind.cmp_format(),
            },
            completion = {
                -- Mainly to suppress collecting excessive amount of executables
                -- from PATH after typing :!
                keyword_length = 2,
            },
        }

        -- Complete VIM commands
        cmp.setup.cmdline(":", {
            mapping = cmp.mapping.preset.cmdline(),
            sources = {
                { name = "cmdline" }
            }
        })

        -- Complete search words
        cmp.setup.cmdline("/", {
            mapping = cmp.mapping.preset.cmdline(),
            sources = {
                { name = "cmdline" }
            }
        })
    end

    local ok, null_ls = pcall(require, "null-ls")
    if ok then
        null_ls.setup {
            sources = {
                null_ls.builtins.formatting.black,
                null_ls.builtins.diagnostics.flake8,
                null_ls.builtins.formatting.prettier.with({
                    filetypes = { "html", "json", "yaml", "markdown" },
                }),
            }
        }
    end
EOF
endif

" Keymaps {{{

" Code-completion (not for Neovim as there will be nvim-cmp)
if !has("nvim")
    imap <silent><C-j>      <C-x><C-o>
endif

" Jump to prev/next l(ocation-list), q(uick-fix-list), (dia)g(nostic-items)
nmap         ]l         <Cmd>lnext<CR>
nmap         [l         <Cmd>lprevious<CR>
nmap         ]q         <Cmd>cnext<CR>
nmap         [q         <Cmd>cprevious<CR>
nmap <silent>[g         <Cmd>lua vim.diagnostic.goto_prev()<CR>
nmap <silent>]g         <Cmd>lua vim.diagnostic.goto_next()<CR>

" Go to something
nmap <silent>gD         <Cmd>lua vim.lsp.buf.declaration()<CR>
nmap <silent>gd         <Cmd>lua vim.lsp.buf.definition()<CR>
nmap <silent>gy         <Cmd>lua vim.lsp.buf.type_definition()<CR>
nmap <silent>gi         <Cmd>lua vim.lsp.buf.implementation()<CR>
nmap <silent>gr         <Cmd>lua vim.lsp.buf.references()<CR>

" Inspection
nmap <silent>K          <Cmd>lua vim.lsp.buf.hover()<CR>
nmap <silent><C-k>      <Cmd>lua vim.lsp.buf.signature_help()<CR>

" Refactoring (and formatting)
nmap <silent><Leader>rr <Cmd>lua vim.lsp.buf.rename()<CR>
nmap <silent><Leader>ra <Cmd>lua vim.lsp.buf.code_action()<CR>
nmap <silent><Leader>rf <Cmd>lua vim.lsp.buf.formatting()<CR>
vmap <silent><Leader>rf <Cmd>lua vim.lsp.buf.range_formatting()<CR>

" Fuzzy finder
if has('nvim')
    nmap <silent><C-p>      <Cmd>Telescope find_files<CR>

    nmap <silent><Leader>fb <Cmd>Telescope buffers<CR>
    nmap <silent><Leader>ff <Cmd>Telescope find_files<CR>
    nmap <silent><Leader>fp <Cmd>Telescope live_grep<CR>
    nmap <silent><Leader>fq <Cmd>Telescope quickfix<CR>
    nmap <silent><Leader>fs <Cmd>Telescope lsp_document_symbols<CR>
    nmap <silent><Leader>fS <Cmd>Telescope lsp_workspace_symbols<CR>
    nmap <silent><Leader>fd <Cmd>Telescope lsp_definitions<CR>
    nmap <silent><Leader>fr <Cmd>Telescope lsp_references<CR>
    nmap <silent><Leader>fi <Cmd>Telescope lsp_implementations<CR>
    nmap <silent><Leader>fg <Cmd>Telescope diagnostics<CR>
else
    nmap         <C-p>      <Cmd>Files<CR>
endif

" Move forward/backward till next non-wsp at same the colum
" https://vi.stackexchange.com/a/693
nmap <silent>gJ     <Cmd>call search('\%' . virtcol('.') . 'v\S', 'W')<CR>
nmap <silent>gK     <Cmd>call search('\%' . virtcol('.') . 'v\S', 'bW')<CR>

" submode to control split window size (vim-submode)
call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')
" }}}

" (vim-polyglot) Override some configurations
let g:vim_markdown_new_list_item_indent = 2

augroup PythonSettings
    autocmd!
    autocmd FileType python set foldmethod=indent
    autocmd FileType python set foldlevel=999
augroup END

augroup RustSettings
    autocmd!
    autocmd FileType rust nmap <Leader>b :make build<CR>
    autocmd FileType rust nmap <Leader>t :make test<CR>
augroup END
