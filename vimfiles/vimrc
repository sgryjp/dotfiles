" vim:set foldmethod=marker:
if has('win32') || has('win64')
    set   termencoding=cp932
endif
if has('linux')
set   path+=/usr/include/**
endif

" File & Edit
set   backspace=indent,eol,start
set   encoding=utf-8
set   fileencoding=utf-8
set   fileencodings=ucs-bom,utf-8,cp932
set nobackup
set nowritebackup
set noswapfile
set noundofile
if has('unnamedplus')
    set clipboard&
    set clipboard^=unnamedplus
endif

" User Interface & Appearence
set notitle
set noruler
set nonumber
set   laststatus=2
set   statusline =%n\ %<%f%R%M,%{&ff}%y%h%w%q
set   statusline+=%=\ %(%l,%c%V%)\ %p%%
set   statusline+=\ %#warningmsg#
set   statusline+=%*
set   updatetime=500
set   wildmenu
set   mouse=
set   completeopt-=preview  " Suppress opening a scratch buffer on completion

" Search
set   hlsearch
set   ignorecase
set   smartcase
set nowrapscan

" Misc.
if executable('rg')
    set   grepprg=rg\ --vimgrep
endif
set  wildignore =*.swp,*.~*
set  wildignore+=*.o,*.obj
set  wildignore+=*.so,*.dll
set  wildignore+=*.py[cod]
set  wildignore+=*.min.*
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
highlight ExtraWhitespace ctermbg=red guibg=red
filetype indent plugin on

" Plugins
call plug#begin()
Plug 'nanotech/jellybeans.vim', { 'tag': '*' }
Plug 'airblade/vim-gitgutter'
Plug 'kana/vim-submode',        { 'tag': '*' }
Plug 'justinmk/vim-sneak',      { 'tag': '*' }
Plug 'tpope/vim-commentary',    { 'tag': '*' }
Plug 'tpope/vim-surround',      { 'tag': '*' }
Plug 'tpope/vim-fugitive',      { 'tag': '*' }
Plug 'sheerun/vim-polyglot',    { 'tag': '*' }
Plug 'qpkorr/vim-renamer'
if has('nvim')
    Plug 'nvim-lua/plenary.nvim' " for telescope.nvim
    Plug 'kyazdani42/nvim-web-devicons' " for telescope.nvim

    Plug 'neovim/nvim-lspconfig'
    Plug 'williamboman/nvim-lsp-installer'
    Plug 'nvim-telescope/telescope.nvim'
else
    Plug 'junegunn/fzf',        { 'tag': '*' }
    Plug 'junegunn/fzf.vim'
endif
call plug#end()

syntax on

" Color scheme (note: load the plugin before this) {{{
set t_Co=256
if has('termguicolors')
    set termguicolors
endif

" Use jellybeans color scheme with a litle darker background
let g:jellybeans_overrides = { 'background' : { 'guibg': '0c0c0c' }, }
colorscheme jellybeans

" (git-gutter) Make markers for deleted line brighter
highlight GitGutterDelete       guifg=#ff000a guibg=#333333
highlight GitGutterChangeDelete guifg=#ff000a guibg=#333333
let g:gitgutter_sign_modified_removed = 'â‰ƒ'
" }}} Color scheme

" Neovim specific configurations
if has("nvim")
    set omnifunc=v:lua.vim.lsp.omnifunc

lua << EOF
    local lsp_installer = require("nvim-lsp-installer")
    lsp_installer.on_server_ready(function(server)
        server:setup {}
        vim.cmd("do User LspAttachBuffers")
    end)
EOF
endif

" Keymaps {{{

" Code-completion
imap <silent><c-j>      <c-x><c-o>

" Jump to prev/next l(ocation-list), q(uick-fix-list), (dia)g(nostic-items)
nmap         ]l         :lnext<CR>
nmap         [l         :lprevious<CR>
nmap         ]q         :cnext<CR>
nmap         [q         :cprevious<CR>
nmap <silent>[g         :lua vim.lsp.diagnostic.goto_prev()<CR>
nmap <silent>]g         :lua vim.lsp.diagnostic.goto_next()<CR>

" Go to something
nmap <silent>gD         :lua vim.lsp.buf.declaration()<CR>
nmap <silent>gd         :lua vim.lsp.buf.definition()<CR>
nmap <silent>gy         :lua vim.lsp.buf.type_definition()<CR>
nmap <silent>gi         :lua vim.lsp.buf.implementation()<CR>
nmap <silent>gr         :lua vim.lsp.buf.references()<CR>

" Inspection
nmap <silent>K          :lua vim.lsp.buf.hover()<CR>
nmap <silent><C-k>      :lua vim.lsp.buf.signature_help()<CR>

" Refactoring (and formatting)
nmap <silent><leader>rr  :lua vim.lsp.buf.rename()<CR>
nmap <silent><leader>ra  :lua vim.lsp.buf.code_action()<CR>
nmap <silent><leader>rf  :lua vim.lsp.buf.formatting()<CR>
vmap <silent><leader>rf  :lua vim.lsp.buf.range_formatting()<CR>

" Finder
if has("nvim")
    nmap <silent><leader>g  :Telescope live_grep<cr>
    nmap <silent><c-p>      :Telescope find_files<cr>
    nmap <silent><leader>ff :Telescope find_files<cr>
    nmap <silent><leader>fb :Telescope buffers<cr>
    nmap <silent><leader>fs :Telescope lsp_document_symbols<cr>
    nmap <silent><leader>fS :Telescope lsp_workspace_symbols<cr>
    nmap <silent><leader>fd :Telescope lsp_definitions<cr>
    nmap <silent><leader>fr :Telescope lsp_references<cr>
    nmap <silent><leader>fi :Telescope lsp_implementations<cr>
    nmap <silent><leader>fg :Telescope lsp_document_diagnostics<cr>
    nmap <silent><leader>fG :Telescope lsp_workspace_diagnostics<cr>
else
    nmap         <c-p>      :Files<cr>
endif

" Move forward/backward till next non-wsp at same the colum
" https://vi.stackexchange.com/a/693
nmap <silent>gJ     :call search('\%' . virtcol('.') . 'v\S', 'W')<CR>
nmap <silent>gK     :call search('\%' . virtcol('.') . 'v\S', 'bW')<CR>

" submode to control split window size (vim-submode)
call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')
" }}}

" Indentation
set shiftround
function! s:SetIndent(size, expand)
    if a:expand == 1
        set   expandtab
    else
        set noexpandtab
    endif
    let &tabstop = a:size
    let &softtabstop = a:size
    let &shiftwidth = a:size
endfunction
call s:SetIndent(4, 1)
augroup indent
    autocmd!
    autocmd FileType gitconfig       call s:SetIndent(8, 0)
    autocmd FileType make            call s:SetIndent(8, 0)
    autocmd FileType go              call s:SetIndent(4, 0)
    autocmd FileType css             call s:SetIndent(2, 1)
    autocmd FileType html            call s:SetIndent(2, 1)
    autocmd FileType javascript      call s:SetIndent(2, 1)
    autocmd FileType javascriptreact call s:SetIndent(2, 1)
    autocmd FileType typescript      call s:SetIndent(2, 1)
    autocmd FileType typescriptreact call s:SetIndent(2, 1)
augroup END

augroup GolangSettings
    autocmd!
    autocmd FileType go nmap <leader>b  <Plug>(go-build)
    autocmd FileType go nmap <leader>r  <Plug>(go-run)
    let g:go_auto_sameids = 1
augroup END

augroup PythonSettings
    autocmd!
    autocmd FileType python set foldmethod=indent
    autocmd FileType python set foldlevel=999
augroup END

augroup RustSettings
    autocmd!
    autocmd FileType rust nmap <leader>b :make build<cr>
    autocmd FileType rust nmap <leader>t :make test<cr>
    let g:rust_cargo_check_tests = 1
augroup END
