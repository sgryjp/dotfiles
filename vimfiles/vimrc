" vim:set foldmethod=marker:
set nocompatible

" Utility functions {{{

function! s:set_indent(size, expand)
    if a:expand == 1
        set   expandtab
    else
        set noexpandtab
    endif
    let &tabstop = a:size
    let &softtabstop = a:size
    let &shiftwidth = a:size
endfunction

function! s:make_in_term_on_exit(j, d, e) abort
    " Scan error messages and put them into quickfix window
    cgetbuffer

    " Let 'q' or Esc to close the terminal window
    nmap<buffer> q     <Cmd>q<CR>
    nmap<buffer> <Esc> <Cmd>q<CR>
    nmap<buffer> <C-[> <Cmd>q<CR>

    " Put cursor to the bottom
    call cursor(9999, 9999)
endfunction

function! s:make_in_term(args) abort
    " Disable shellslash temporarily
    " TODO: Confirm this is right on Windows
    if exists('+shellslash')
        let l:shellslash = &shellslash
        set noshellslash
    endif

    try
        " Resolve command line to execute
        let l:cmdline = &makeprg
        if strlen(l:cmdline) == 0
            let &l:cmdline = 'make'
        endif
        let l:cmdline .= " " . a:args

        " Remember current errorformat for parsing result later as creating a
        " buffer may change it depending on configuration (e.g.: `autocmd`s).
        let l:errorformat = &errorformat

        " Execute it in a terminal buffer
        rightbelow vnew
        let l:options = {'on_exit': function("s:make_in_term_on_exit")}
        let l:job = termopen(l:cmdline, l:options)
    finally
        if exists('+shellslash')
            let &shellslash = l:shellslash
        endif
    endtry
endfunction

command! -nargs=* MakeInTerm call s:make_in_term('<args>')

" }}}

" OS dependent workarounds {{{
if has('win32') || has('win64')
    set   termencoding=cp932
    " :PlugUpdate fails if `pwsh.exe` is set for shell...
    " https://www.reddit.com/r/neovim/comments/gbb2g3/wierd_vimplug_error_messages/g3n3vtl/
    "if executable('pwsh')
    "    set shell=pwsh.exe
    "endif

    " Use tee command on Windows too (should be bundled with Neovim)
    if executable('tee')
        set shellpipe=2>&1\|\ tee
    endif
endif
if has('linux')
set   path+=/usr/include/**
endif
" }}}

" File & Edit
set   backspace=indent,eol,start
set   encoding=utf-8
set   fileencoding=utf-8
set   fileencodings=ucs-bom,utf-8,cp932
set nobackup
set nowritebackup
set noswapfile
set noundofile
if has('unnamedplus')
    set clipboard&
    set clipboard^=unnamedplus
endif

" User Interface & Appearence
set notitle
set noruler
set   number
set   relativenumber
if has('nvim-0.7')
    set laststatus=3
else
    set laststatus=2
endif
set   statusline =%n\ %<%f%R%M,%{&ff}%y%h%w%q
set   statusline+=%=\ %(%l,%c%V%)\ %p%%
set   statusline+=\ %#warningmsg#
set   statusline+=%*
set   scrolloff=2
set   updatetime=500
set   wildmenu
if !has('nvim-0.8')
    set mouse=
endif
set   completeopt=menuone,noinsert,noselect

" Search
set   hlsearch
set   ignorecase
set   smartcase
set nowrapscan

" Indentation
set shiftround
call s:set_indent(4, 1)
augroup indent
    autocmd!
    autocmd FileType gitconfig       call s:set_indent(8, 0)
    autocmd FileType make            call s:set_indent(8, 0)
    autocmd FileType go              call s:set_indent(4, 0)
    autocmd FileType css             call s:set_indent(2, 1)
    autocmd FileType html            call s:set_indent(2, 1)
    autocmd FileType javascript      call s:set_indent(2, 1)
    autocmd FileType javascriptreact call s:set_indent(2, 1)
    autocmd FileType typescript      call s:set_indent(2, 1)
    autocmd FileType typescriptreact call s:set_indent(2, 1)
augroup END

" Misc.
if executable('rg')
    set   grepprg=rg\ --vimgrep
endif
set  wildignore =*.swp,*.~*
set  wildignore+=*.o,*.obj
set  wildignore+=*.so,*.dll
set  wildignore+=*.py[cod]
set  wildignore+=*.min.*
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
highlight ExtraWhitespace ctermbg=red guibg=red
filetype indent plugin on

" Plugins
call plug#begin()
if has('nvim')
    Plug 'arcticicestudio/nord-vim',    { 'tag': '*' }
else
    Plug 'nanotech/jellybeans.vim',     { 'tag': '*' }
endif
Plug 'airblade/vim-gitgutter'
Plug 'kana/vim-submode',        { 'tag': '*' }
Plug 'tpope/vim-commentary',    { 'tag': '*' }
Plug 'machakann/vim-sandwich',  { 'tag': '*' }
Plug 'tpope/vim-fugitive',      { 'tag': '*' }
Plug 'sheerun/vim-polyglot'
Plug 'qpkorr/vim-renamer'
Plug 'lukas-reineke/indent-blankline.nvim'
if has('nvim')
    Plug 'nvim-lua/plenary.nvim' " for telescope.nvim
    Plug 'kyazdani42/nvim-web-devicons' " for telescope.nvim

    Plug 'kyazdani42/nvim-tree.lua'
    Plug 'williamboman/mason.nvim', { 'do': ':MasonUpdate' }
    Plug 'williamboman/mason-lspconfig.nvim'
    Plug 'neovim/nvim-lspconfig'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-telescope/telescope-ui-select.nvim'
    Plug 'nvim-lualine/lualine.nvim'
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-nvim-lua'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'onsails/lspkind-nvim'
    Plug 'jose-elias-alvarez/null-ls.nvim'
else
    Plug 'junegunn/fzf',        { 'tag': '*', 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'editorconfig/editorconfig-vim', { 'tag': '*' }
endif
call plug#end()

syntax on

" Color scheme (note: load the plugin before this) {{{
set t_Co=256
if has('termguicolors')
    set termguicolors
endif

if has('nvim')
    let g:nord_italic = 1
    let g:nord_underline = 1
    colorscheme nord
else
    " Use jellybeans color scheme with a litle darker background
    " ...and adjust GitGutter sign color a little
    let g:jellybeans_overrides = { 'background' : { 'guibg': '0c0c0c' }, }
    highlight GitGutterDelete       guifg=#ff000a guibg=#333333
    highlight GitGutterChangeDelete guifg=#ff000a guibg=#333333
    colorscheme jellybeans
endif

" }}} Color scheme

" (GitGutter) Use '≅' instead of '~_' for modified & removed line
let g:gitgutter_sign_modified_removed = '≅'

" Keymaps {{{

" Close auxiliary windows by <C-[> in normal mode.
nmap <silent><C-[>      <Cmd>cclose<CR>
                        \<Cmd>lclose<CR>
                        \<Cmd>helpclose<CR>

" Code-completion (not for Neovim as there will be nvim-cmp)
if !has("nvim")
    imap <silent><C-i>      <C-x><C-o>
endif

" Jump to prev/next l(ocation-list), q(uick-fix-list), (dia)g(nostic-items)
nmap         ]l         <Cmd>lnext<CR>
nmap         [l         <Cmd>lprevious<CR>
nmap         ]q         <Cmd>cnext<CR>
nmap         [q         <Cmd>cprevious<CR>
nmap <silent>[g         <Cmd>lua vim.diagnostic.goto_prev()<CR>
nmap <silent>]g         <Cmd>lua vim.diagnostic.goto_next()<CR>

" Go to something
nmap <silent>gD         <Cmd>lua vim.lsp.buf.declaration()<CR>
nmap <silent>gd         <Cmd>lua vim.lsp.buf.definition()<CR>
nmap <silent>gy         <Cmd>lua vim.lsp.buf.type_definition()<CR>
nmap <silent>gi         <Cmd>lua vim.lsp.buf.implementation()<CR>
nmap <silent>gr         <Cmd>lua vim.lsp.buf.references()<CR>

" Inspection
nmap <silent>K          <Cmd>lua vim.lsp.buf.hover()<CR>
nmap <silent><C-k>      <Cmd>lua vim.lsp.buf.signature_help()<CR>

" Refactoring (and formatting)
nmap \r <Cmd>lua vim.lsp.buf.rename()<CR>
nmap \a <Cmd>lua vim.lsp.buf.code_action()<CR>
nmap \f <Cmd>lua vim.lsp.buf.format({async = false})<CR>
vmap \f <Cmd>lua vim.lsp.buf.range_formatting()<CR>

" Fuzzy finder
if has('nvim')
    nmap <silent><C-p>      <Cmd>Telescope find_files<CR>

    nmap <silent><Space>b  <Cmd>Telescope buffers<CR>
    nmap <silent><Space>f  <Cmd>Telescope find_files<CR>
    nmap <silent><Space>p  <Cmd>Telescope live_grep<CR>
    nmap <silent><Space>q  <Cmd>Telescope quickfix<CR>
    nmap <silent><Space>s  <Cmd>Telescope lsp_document_symbols<CR>
    nmap <silent><Space>S  <Cmd>Telescope lsp_workspace_symbols<CR>
    nmap <silent><Space>d  <Cmd>Telescope lsp_definitions<CR>
    nmap <silent><Space>r  <Cmd>Telescope lsp_references<CR>
    nmap <silent><Space>i  <Cmd>Telescope lsp_implementations<CR>
    nmap <silent><Space>g  <Cmd>Telescope diagnostics<CR>
else
    nmap         <C-p>      <Cmd>Files<CR>
endif

" File explorer (nvim-tree)
nmap         <C-n>  <Cmd>NvimTreeFindFileToggle<CR>

" Moves between windows
nmap         <C-h>  <C-w>h
nmap         <C-j>  <C-w>j
nmap         <C-k>  <C-w>k
nmap         <C-l>  <C-w>l
tmap         <Esc>  <C-\><C-n>
tmap         <C-[>  <C-\><C-n>
tmap         <C-h>  <C-\><C-n><C-w>h
tmap         <C-j>  <C-\><C-n><C-w>j
tmap         <C-k>  <C-\><C-n><C-w>k
tmap         <C-l>  <C-\><C-n><C-w>l

" Move forward/backward till next non-wsp at same the colum
" https://vi.stackexchange.com/a/693
nmap <silent>gJ     <Cmd>call search('\%' . virtcol('.') . 'v\S', 'W')<CR>
nmap <silent>gK     <Cmd>call search('\%' . virtcol('.') . 'v\S', 'bW')<CR>

" submode to control split window size (vim-submode)
call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')
" }}}

" (vim-polyglot) Override some configurations
let g:vim_markdown_new_list_item_indent = 2

augroup PythonSettings
    " Using pytest for unit testing.
    " Note that setting errorformat for pytest is not necessary because it's
    " the same as flake8's which should be provided by vim-polyglot.
    autocmd!
    autocmd FileType python setlocal foldmethod=indent
    autocmd FileType python setlocal foldlevel=999
    autocmd FileType python setlocal makeprg=python\ $*
    autocmd FileType python nmap<buffer>    \t <Cmd>make -m pytest<CR>
augroup END

augroup RustSettings
    autocmd!
    autocmd FileType rust   nmap<buffer>    \b :make build<CR>
    autocmd FileType rust   nmap<buffer>    \t :make test<CR>
augroup END

augroup GoSettings
    autocmd!
    autocmd FileType go     setlocal makeprg=go
    autocmd FileType go     nmap<buffer>    \b :make build ./...<CR>
    autocmd FileType go     nmap<buffer>    \t :make test ./...<CR>
augroup END

augroup HelpSettings
    autocmd!
    autocmd FileType help   nmap<buffer> q     <Cmd>close<CR>
    autocmd FileType help   nmap<buffer> <C-[> <Cmd>close<CR>
    autocmd FileType help   nmap<buffer> <Esc> <Cmd>close<CR>
augroup END
